{"version":3,"sources":["components/character/index.jsx","components/addCharacter/index.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["CharacterName","state","edit","newName","selectCharacter","props","clickHandler","name","toggleEdit","e","setState","stopPropagation","deleteCharacter","onDelete","changeCharacterName","event","target","value","cancelEditingName","saveName","onChangeName","renderEdit","autoFocus","onPressEnter","onChange","SaveOutlined","onClick","CloseOutlined","renderSpan","EditOutlined","DeleteOutlined","content","this","React","Component","AddCharacter","visible","showModal","handleOk","onAdd","handleCancel","changeName","UserAddOutlined","title","onOk","onCancel","placeholder","SagaScheduler","character","console","log","names","menuItem","key","newNames","concat","splice","indexOf","oldName","addCharacter","push","drawCharacters","map","index","Item","schedule","localStorage","getItem","scheduleJson","JSON","parse","handleClick","style","width","mode","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e419eb91.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Input, Space } from 'antd';\r\nimport { EditOutlined, SaveOutlined, DeleteOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\n\r\nexport class CharacterName extends React.Component {\r\n  state = {\r\n    edit: false,\r\n    newName: '',\r\n  };\r\n\r\n  selectCharacter = () => {\r\n    this.props.clickHandler(this.props.name);\r\n  };\r\n\r\n  toggleEdit = (e) => {\r\n    this.setState({\r\n      edit: !this.state.edit,\r\n      newName: this.props.name,\r\n    });\r\n    e.stopPropagation();\r\n  };\r\n\r\n  deleteCharacter = () => {\r\n    this.props.onDelete(this.props.name);\r\n  }\r\n\r\n  changeCharacterName = (event) => {\r\n    this.setState({\r\n      newName: event.target.value\r\n    });\r\n  }\r\n\r\n  cancelEditingName = (e) => {\r\n    this.toggleEdit(e);\r\n  }\r\n\r\n  saveName = (e) => {\r\n    this.props.onChangeName(this.props.name, this.state.newName);\r\n    this.toggleEdit(e);\r\n  }\r\n\r\n  renderEdit = () => {\r\n    return (\r\n      <>\r\n        <Input autoFocus={true} value={this.state.newName} onPressEnter={this.saveName} onChange={this.changeCharacterName}/>\r\n        <SaveOutlined onClick={this.saveName}/>\r\n        <CloseOutlined onClick={this.cancelEditingName}/>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderSpan = () => {\r\n    return (\r\n      <>\r\n        {this.props.name}\r\n        <EditOutlined onClick={this.toggleEdit}/>\r\n        <DeleteOutlined onClick={this.deleteCharacter}/>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const content = this.state.edit ? \r\n      this.renderEdit() :\r\n      this.renderSpan();\r\n\r\n    return (\r\n      <Space>\r\n        {content}\r\n      </Space>\r\n    );\r\n  }\r\n};","import React from 'react';\r\nimport { Modal, Input } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\n\r\nexport class AddCharacter extends React.Component {\r\n  state = { visible: false };\r\n  name = '';\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n    if (this.name === '') {\r\n      return;\r\n    }\r\n    this.props.onAdd(this.name);\r\n  };\r\n\r\n  handleCancel = e => {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  changeName = (event) => {\r\n    this.name = event.target.value;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <UserAddOutlined onClick={this.showModal}/>\r\n        <Modal\r\n          title=\"Basic Modal\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <Input placeholder=\"Name\" onChange={this.changeName}/>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\n\r\nimport { CharacterName } from './character';\r\nimport { AddCharacter } from './addCharacter';\r\n\r\nexport class SagaScheduler extends React.Component {\r\n\r\n  selectCharacter = (character) => {\r\n    console.log('character', character);\r\n\r\n  };\r\n\r\n  state = {\r\n    names: ['1', '2', '3'],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const schedule = localStorage.getItem('sagaScheduler');\r\n    const scheduleJson = JSON.parse(schedule);\r\n    if (scheduleJson) {\r\n      console.log('componentDidMount', scheduleJson);     \r\n    }\r\n  }\r\n\r\n  selectCharacter = (menuItem) => {\r\n    console.log('characterName', menuItem.key);\r\n  }\r\n\r\n  deleteCharacter = (name) => {\r\n    const newNames = [].concat(this.state.names);\r\n    newNames.splice(newNames.indexOf(name), 1);\r\n    this.setState({\r\n      names: newNames,\r\n    })\r\n  };\r\n\r\n  onChangeName = (oldName, newName) => {\r\n    const newNames = [].concat(this.state.names);\r\n    newNames[newNames.indexOf(oldName)] = newName;\r\n    this.setState({\r\n      names: newNames,\r\n    })\r\n  }\r\n\r\n  addCharacter = (name) => {\r\n    const newNames = [].concat(this.state.names);\r\n    newNames.push(name);\r\n    this.setState({\r\n      names: newNames,\r\n    });\r\n  }\r\n\r\n  drawCharacters = () => {\r\n    return this.state.names.map((name, index) => (\r\n      <Menu.Item key={index} onClick={this.selectCharacter}>\r\n        <CharacterName\r\n          name={name}\r\n          onChangeName={this.onChangeName}\r\n          onDelete={this.deleteCharacter}\r\n          />\r\n      </Menu.Item>\r\n    ));\r\n  };\r\n\r\n  render() {   \r\n\r\n    return (\r\n      <Menu\r\n        onClick={this.handleClick}\r\n        style={{ width: 200 }}\r\n        mode=\"inline\"\r\n      >\r\n        {this.drawCharacters()}\r\n        <Menu.Item>\r\n          <AddCharacter onAdd={this.addCharacter}/>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { SagaScheduler } from './components/main';\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SagaScheduler/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}